import numpy as np
from numpy import pi
from matplotlib import pyplot as plt
___________________________________________________________________________________________________________________________________
print('Question 3, Part 1: Vector')
mylist=[10,30,100,300,1000]
err=np.linspace(0,4,5)
counter = 0

for n in mylist: #where n is the sample space
 x=np.linspace(0,pi/2,n) #vector 
 print (x) #prints n evenly spaced numbers between 0 and pi/2
 print (n)
___________________________________________________________________________________________________________________________________
print('Question 3, Part 2: Integral')
 f=np.cos(x) #define function
 x0=0
 x1=pi/2 
 dx=(x1-x0)/n # length of x interval
 integral=np.sum(f)*dx
 print ('The integral is ' + repr(integral) + ' for n=' + repr(n))
 
 error= abs(1-integral) 
 err[counter] = error
 counter = counter +1
 # since the integral of function with the given bounds is supposed to be 1
 print ('The error is ' + repr(error) + ' for n=' + repr(n))
 # err is proportional  to (n**-5/4) 
 # as n increases the error decreases
__________________________________________________________________________________________________________________________________
print ('Question 6, standard plot')
plt.plot(mylist,err)
plt.yscale('log')
plt.show()
print (err) #gives a negative exponential graph
__________________________________________________________________________________________________________________________________
print ('Question 4')
# Lets assume an ordered array begining from 0
# the sample value 1001 is used as an example, this can be changed
a = np.arange(1001) 

# Taking all odd numbers from an array
print (a[1:-1:2]) # -1 denotes the end of the array

# Taking all even numbers in an array and leaving out the first and last terms
print (a[4:-2:2])
_____________________________________________________________________________________________________________________________________
print ('Question 5')
def a(n):
    # vector from 0 to n-1 will have n points.
    x=np.arange(0,n)
    x=0.5*x*pi/(n-1)
    return x
def integrate_cos_simpson(n):
   
    dx=pi/2/(n-1)*2

    v=np.cos(a(n))
    # even and odd numbers with leaving out the first and last terms
    x_even=v[2:-1:2]
    x_odd=v[1:-1:2]
    tot=np.sum(x_even)/3+np.sum(x_odd)*2/3+v[0]/6+v[-1]/6
    return tot*dx
if __name__==('__main__'):
      print ('answering problem 4')
      val=integrate_cos_simpson(11)
      err=np.abs(val-1)
      print (('error on 11 points is ') + repr(err-1))
      nsample=[10,30,100,300,1000]
      for n in nsample:
        err=np.abs(integrate_cos_simpson(n)-1)
        print ('simpsons error for ' + repr(n) + ' is ' + repr(err))
        nsample=[10,30,100,300,1000]
        nsample=np.array(nsample)
        simpson_err=np.zeros(nsample.size)
  
      for ii in range(nsample.size):
          n=nsample[ii]
          simpson_err[ii]=np.abs(integrate_cos_simpson(n)-1)
____________________________________________________________________________________________________________________________________  
print ('Question 6, simpsons plot')
plt.plot(nsample,simpson_err)
ax=plt.gca()

ax.set_yscale('log')
ax.set_xscale('log')
plt.show() #gives  a straight line graph
 
 
 
